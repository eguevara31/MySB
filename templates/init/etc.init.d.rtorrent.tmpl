#!/bin/bash
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

### BEGIN INIT INFO
# Provides:          rtorrent-<username>
# Required-Start:    $local_fs $network $syslog $named $mysql
# Required-Stop:     $local_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop rtorrent-<username> daemon
# Description:       Start/stop rtorrent-<username> daemon.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

#### Includes
source /etc/MySB/config || exit 0
source $MySB_InstallDir/inc/vars || exit 0
source /lib/lsb/init-functions || exit 0

######################################################################
#
# S T A R T   C U S T O M I Z A T I O N S
#
######################################################################

#------------------------------------------------------------
# rTorrent Infos
#------------------------------------------------------------
gsUsername="<username>" # Username to run rtorrent under
gsHomeDir="/home/$gsUsername" # User home dir
gsSessionDir="$gsHomeDir/rtorrent/.session" # rTorrent session directory
gsPidFile="/var/run/rtorrent-$gsUsername.pid" # PID file
gsLockFile="$gsSessionDir/rtorrent.lock" # Lock file
gsBinName="rtorrent-$gsUsername"
gsBinDesc="rTorrent for $gsUsername"
#------------------------------------------------------------
# Binary
#------------------------------------------------------------
 # rTorrent bin
rTorrentVersion="`cmdMySQL 'MySB_db' "SELECT rtorrent_version FROM users WHERE users_ident='$gsUsername';"`"
case "$rTorrentVersion" in
    "v0.9.6")   binRtorrent="/usr/bin/rtorrent";;
    "v0.9.7")   binRtorrent="/usr/local/bin/rtorrent";;
    *)          binRtorrent="/usr/bin/rtorrent";;
esac
binScreen="/usr/bin/screen" # Screen binary
#------------------------------------------------------------
# Log
#------------------------------------------------------------
gsLogFile="$gsHomeDir/logs/rTorrentInit.log"

######################################################################
#
# E N D   C U S T O M I Z A T I O N S
#
######################################################################

######################################################################
#
# S T A R T   W O R K S P A C E
#
######################################################################

#------------------------------------------------------------
# Functions - Begin
#------------------------------------------------------------

## Create PID file for rTorrent
gfnCreatePidFile() {
	sleep 1
	if [ -e $gsLockFile ]; then
		cat $gsLockFile | awk -F: '{print($2)}' | sed "s/[^0-9]//g" > $gsPidFile
		echo "Create rTorrent PID file: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
	fi
}

## Delete PID file and rtorrent.lock
gfnDeletePidLockFile() {
	if [ -e $gsPidFile ]; then
		pidofproc -p $gsPidFile $binScreen &> /dev/null || rm -f $gsPidFile $gsLockFile 2>> $gsLogFile
	fi
    rm -vf $gsLockFile >> $gsLogFile
    echo "Delete rTorrent LOCK file: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
    rm -vf $gsPidFile >> $gsLogFile
    echo "Delete rTorrent PID file: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
}

## mount share dir for seedbox users
gfnMountShareDir() {
    local sMountList
	sMountList="`mount -l 2> /dev/null | grep "$gsHomeDir/rtorrent/share"`"

	case "$1" in
		'mount')
			if [ -z "$sMountList" ]; then
				umount $gsHomeDir/rtorrent/share > /dev/null 2>&1
				mount --bind /home/MySB_share $gsHomeDir/rtorrent/share 2>> $gsLogFile
			fi
		;;
		'umount')
			if [ ! -z "$sMountList" ]; then
				umount $gsHomeDir/rtorrent/share 2>> $gsLogFile
			fi
		;;
	esac
}

## mount torrents dir for seedbox users
gfnMountTorrentsDir() {
    local sMountList
	sMountList="`mount -l 2> /dev/null | grep "$gsHomeDir/rtorrent/torrents"`"

	case "$1" in
		'mount')
			if [ -z "$sMountList" ] && [ -d $gsRutorrentDir/share/users/$gsUsername/torrents ]; then
				umount $gsHomeDir/rtorrent/torrents > /dev/null 2>&1
				mount --bind $gsRutorrentDir/share/users/$gsUsername/torrents $gsHomeDir/rtorrent/torrents 2>> $gsLogFile
			fi
		;;
		'umount')
			if [ ! -z "$sMountList" ]; then
				umount $gsHomeDir/rtorrent/torrents 2>> $gsLogFile
			fi
		;;
	esac
}

#
# Function that starts the daemon/service
#
gfnDoStart() {
    # Mount
	gfnMountShareDir 'mount'
	gfnMountTorrentsDir 'mount'

    # Create config file
	source $MySB_InstallDir/inc/funcs_by_script/funcs_MySB_CreateUser
	gfnCreateRtorrentConfigFile "$gsUsername"

	# Delete ghost pid and lock file
	gfnDeletePidLockFile

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --background --make-pidfile --test \
		--pidfile $gsPidFile\
		--chuid $gsUsername\
		--exec $binScreen\
		-- -DmUS $gsBinName $binRtorrent\
		 2>> $gsLogFile || return 1

	start-stop-daemon --start --quiet --background --make-pidfile \
		--pidfile $gsPidFile\
		--chuid $gsUsername\
		--exec $binScreen\
		-- -DmUS $gsBinName $binRtorrent\
		 2>> $gsLogFile || return 2
}

#
# Function that stops the daemon/service
#
gfnDoStop() {
    local nReturn sGhostProcess

    # Unmout
	gfnMountShareDir 'umount'
	gfnMountTorrentsDir 'umount'

	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $gsPidFile --exec $binScreen 2>> $gsLogFile
	nReturn="$?"

    sGhostProcess="`ps ax | grep "rtorrent-$gsUsername $binRtorrent" | grep -v 'grep' | awk '{ print $1 }'`"
    [ ! -z "$sGhostProcess" ] && kill -9 $sGhostProcess
    gfnDeletePidLockFile

	return "$nReturn"
}

#
# Function that sends a SIGHUP to the daemon/service
#
gfnDoReload() {
	echo "RELOAD: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
	# Delete ghost screen pid file
	if [ -e $gsPidFile ]; then
		pidofproc -p $gsPidFile $binScreen &> /dev/null || rm -f $gsPidFile
	fi

	# Delete ghost rtorrent lock file
	if [ -e $gsPidFile ]; then
		pidofproc -p $gsPidFile $binScreen &> /dev/null || rm -f $gsPidFile $gsLockFile 2>> $gsLogFile
	fi

	start-stop-daemon --stop --signal HUP --quiet --pidfile $gsPidFile --exec $binScreen 2>> $gsLogFile
	return $?
}

#
# Function stop case
#
gfnRestartStopCase() {
	gfnDoStart
	case "$?" in
		0)
			echo "RESTART: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
			gfnCreatePidFile
			cmdMySQL 'MySB_db' "UPDATE users SET rtorrent_restart='0' WHERE users_ident='$gsUsername';"
			log_end_msg 0
		;;
		1) # Old process is still running
			echo "Could not be restarted, old process is still running: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
			gfnCreatePidFile
			log_end_msg 1
		;;
		*) # Failed to start
			echo "Could not be restarted: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
			gfnDeletePidLockFile
			log_end_msg 1
		;;
	esac
}

#------------------------------------------------------------
# Functions - End
#------------------------------------------------------------

######################################################################
#
# E N D   W O R K S P A C E
#
######################################################################

######################################################################
#
# S T A R T   C O M M A N D   L I N E   M O D E
#
######################################################################

## Check if user exist
if [ -z "`getent passwd $gsUsername`" ]; then
	echo "User $gsUsername does not exist !"
	exit 0
fi

## Create log file
if ! [ -e $gsLogFile ]; then
	touch $gsLogFile
fi

## Sync DB
if [ ! -f $gsHomeDir/db/$gsUsername.sq3 ]; then
	cp $gsSync_DB $gsHomeDir/db/$gsUsername.sq3
	chmod -R 0770 $gsHomeDir/db
	chown -R $FnUser:www-data $gsHomeDir/db
fi

## Options
case "$1" in
	'start')
		log_daemon_msg "Starting $gsBinDesc" "$gsBinName"
		gfnDoStart
		case "$?" in
			0)
				echo "START: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
				gfnCreatePidFile
				cmdMySQL 'MySB_db' "UPDATE users SET rtorrent_restart='0' WHERE users_ident='$gsUsername';"
				log_end_msg 0
			;;
			1)
				echo "Already running: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
				gfnCreatePidFile
				log_end_msg 0
			;;
			2)
				echo "Could not be started: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
				gfnDeletePidLockFile
				log_end_msg 1
			;;
		esac
	;;
	'stop')
		log_daemon_msg "Stopping $gsBinDesc" "$gsBinName"
		gfnDoStop
		case "$?" in
			0)
				echo "STOP: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
				log_end_msg 0
			;;
			1)
				echo "Already stopped: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
				log_end_msg 0
			;;
			2)
				echo "Could not be stopped, the process was killed: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $gsLogFile
				log_end_msg 1
			;;
		esac
	;;
	'restart')
		log_daemon_msg "Restarting $gsBinDesc" "$gsBinName"
		gfnDoStop
		case "$?" in
			0)	gfnRestartStopCase;;
			1)	gfnRestartStopCase;;
		esac
	;;
	'reload')
		log_daemon_msg "Reloading $gsBinDesc configuration" "$gsBinName"
		gfnDoReload
		log_end_msg $?
	;;
	'status')
		status_of_proc -p $gsPidFile "$binScreen" "$gsBinName" && exit 0 || exit $?
	;;
	*)
		echo "Usage: service rtorrent-$gsUsername {start|stop|restart|reload|status}"
		exit 3
	;;
esac

######################################################################
#
# E N D   C O M M A N D   L I N E   M O D E
#
######################################################################

exit 0

##################### LAST LINE ######################################
